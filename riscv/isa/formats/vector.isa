// -*- mode:c++ -*-

// Copyright (c) 2018 University of California, Los Angeles
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met: redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer;
// redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution;
// neither the name of the copyright holders nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Authors: Xinyu Ma, Zhaoning Kong

////////////////////////////////////////////////////////////////////
//
// Vector operation instructions
//
def template VectorExecute {{
    Fault %(class_name)s::execute(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        %(op_decl)s;
        %(op_rd)s;

        int mask;

        switch (VMASKE) {
            case 0x0:
                mask = 2;
                break;
            case 0x1:
                mask = 3;
                break;
            case 0x2:
                mask = 0;
                break;
            case 0x3:
                mask = 1;
                break;
        }
        if(mask) {} else {}     /* Keep GCC happy */

        if (fault == NoFault) {
            if (fault == NoFault) {
                %(code)s;
            }

            if (fault == NoFault) {
                %(op_wb)s;
            }
        }
        return fault;
    }
}};

def template VectorLoadStoreConstructor {{
    %(class_name)s::%(class_name)s(ExtMachInst machInst):
        %(base_class)s("%(mnemonic)s", machInst, %(op_class)s)
    {
        %(constructor)s;
        %(offset_code)s;
    }
}};

let {{
def VectorLoadStoreBase(name, Name, offset_code, ea_code, memacc_code, mem_flags,
                        inst_flags, base_class, postacc_code='', decode_template=BasicDecode,
                        exec_template_base=''):
    # Make sure flags are in lists (convert to lists if not).
    mem_flags = makeList(mem_flags)
    inst_flags = makeList(inst_flags)

    iop = InstObjParams(name, Name, base_class,
        {'offset_code': offset_code, 'ea_code': ea_code,
         'memacc_code': memacc_code, 'postacc_code': postacc_code },
        inst_flags)

    if mem_flags:
        mem_flags = [ 'Request::%s' % flag for flag in mem_flags ]
        s = '\n\tmemAccessFlags = ' + string.join(mem_flags, '|') + ';'
        iop.constructor += s

    # select templates

    fullExecTemplate = eval(exec_template_base + 'Execute')
    initiateAccTemplate = eval(exec_template_base + 'InitiateAcc')
    completeAccTemplate = eval(exec_template_base + 'CompleteAcc')

    # (header_output, decoder_output, decode_block, exec_output)
    return (LoadStoreDeclare.subst(iop),
        VectorLoadStoreConstructor.subst(iop),
        decode_template.subst(iop),
        fullExecTemplate.subst(iop) +
        initiateAccTemplate.subst(iop) +
        completeAccTemplate.subst(iop))
}};

def template VectorLoadExecute {{
    Fault
    %(class_name)s::execute(
        ExecContext *xc, Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        %(op_decl)s;
        %(op_rd)s;
        %(ea_code)s;

        if (fault == NoFault) {
            uint32_t csr_vl = xc->readMiscReg(MISCREG_VL);
            uint32_t stride = 0;
            for (int i = 0; i < csr_vl && fault == NoFault; ++i) {
                fault = readMemAtomic(xc, traceData, EA, Mem, memAccessFlags);
                %(memacc_code)s;
                if (stride == 0) {
                    EA += 4;
                } else {
                    EA += stride;
                }
            }
        }

        if (fault == NoFault) {
            %(op_wb)s;
        }

        return fault;
    }
}};

def template VectorLoadInitiateAcc {{
    Fault
    %(class_name)s::initiateAcc(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        %(op_src_decl)s;
        %(op_rd)s;
        %(ea_code)s;

        if (fault == NoFault) {
            fault = initiateMemRead(xc, traceData, EA, Mem, memAccessFlags);
        }

        return fault;
    }
}};

def template VectorLoadCompleteAcc {{
    Fault
    %(class_name)s::completeAcc(PacketPtr pkt, ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        %(op_decl)s;
        %(op_rd)s;

        getMem(pkt, Mem, traceData);

        if (fault == NoFault) {
            uint32_t csr_vl = xc->readMiscReg(MISCREG_VL);
            uint32_t stride = 0;
            int i = 0;

            %(memacc_code)s;
            printf("PIPELINED CPUs ARE NOT SUPPORTED: %u\n", Mem);

            Addr EA;
            %(ea_code)s;
            for (int i = 0; i < csr_vl && fault == NoFault; ++i) {
                fault = readMemAtomic(xc, traceData, EA, Mem, memAccessFlags);
                %(memacc_code)s;
                printf("COMPLETE LOAD: %u\n", Mem);
                if (stride == 0) {
                    EA += 4;
                } else {
                    EA += stride;
                }
            }   
        }

        if (fault == NoFault) {
            %(op_wb)s;
        }

        return fault;
    }
}};

def template VectorStoreExecute {{
    Fault
    %(class_name)s::execute(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        %(op_decl)s;
        %(op_rd)s;
        %(ea_code)s;

        if (fault == NoFault) {
            uint32_t csr_vl = xc->readMiscReg(MISCREG_VL);
            uint32_t stride = 0;
            for (int i = 0; i < csr_vl && fault == NoFault; ++i) {
                %(memacc_code)s;
                fault = writeMemAtomic(xc, traceData, Mem, EA, memAccessFlags,
                    nullptr);
                if (stride == 0) {
                    EA += 4;
                } else {
                    EA += stride;
                }
            }
        }

        return fault;
    }
}};

def template VectorStoreInitiateAcc {{
    Fault
    %(class_name)s::initiateAcc(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        Addr EA;
        Fault fault = NoFault;

        %(op_decl)s;
        %(op_rd)s;
        %(ea_code)s;

        if (fault == NoFault) {
            uint32_t csr_vl = xc->readMiscReg(MISCREG_VL);
            uint32_t stride = 0;
            for (int i = 0; i < csr_vl && fault == NoFault; ++i) {
                %(memacc_code)s;
                fault = writeMemTiming(xc, traceData, Mem, EA,
                    memAccessFlags, nullptr);
                if (stride == 0) {
                    EA += 4;
                } else {
                    EA += stride;
                }
            }
        }

        return fault;
    }
}};

def template VectorStoreCompleteAcc {{
    Fault
    %(class_name)s::completeAcc(PacketPtr pkt, ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        return NoFault;
    }
}};

def format VVOp(code, *opt_flags) {{
    iop = InstObjParams(name, Name, 'RegOp', code, opt_flags)
    header_output = BasicDeclare.subst(iop)
    decoder_output = BasicConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = VectorExecute.subst(iop)
}};

def format VectorLoad(memacc_code, ea_code = {{EA = Rs1 + offset;}},
        offset_code={{offset = sext<3>(VLIMM3);}},
        mem_flags=[], inst_flags=[]) {{
    (header_output, decoder_output, decode_block, exec_output) = \
        LoadStoreBase(name, Name, offset_code, ea_code, memacc_code, mem_flags,
        inst_flags, 'Load', exec_template_base='VectorLoad')
}};

def format VectorStore(memacc_code, ea_code = {{EA = Rs1 + offset;}},
        offset_code={{offset = sext<3>(VSIMM3);}},
        mem_flags=[], inst_flags=[]) {{
    (header_output, decoder_output, decode_block, exec_output) = \
        LoadStoreBase(name, Name, offset_code, ea_code, memacc_code, mem_flags,
        inst_flags, 'Store', exec_template_base='VectorStore')
}};